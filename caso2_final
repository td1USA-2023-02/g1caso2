import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import pearsonr
from PIL import Image

pd.set_option('display.max_columns', None)

archivo_origen = "g1caso2\dta_flimpiadav2.csv"
# Leer los datos desde el archivo CSV y especificar que la primera fila es el encabezado
datos = pd.read_csv(archivo_origen)

# Verificar los primeros registros
print(datos.head())
print(datos.columns)


print(datos.shape)
print(datos.info())
print(datos.isnull().sum())
print(datos.describe())

indice_max_sales = datos['Sales'].idxmax()
fila_max_sales = datos.loc[indice_max_sales]
print("El máximo de ventas es", fila_max_sales)

indice_max_quantity = datos['Quantity'].idxmax()
fila_max_quantity = datos.loc[indice_max_quantity]
print("El máximo de cantidad es", fila_max_quantity)

indice_max_discount = datos['Discount'].idxmax()
fila_max_discount = datos.loc[indice_max_discount]
print("El máximo de descuento es", fila_max_discount)

indice_max_profit = datos['Profit'].idxmax()
fila_max_profit = datos.loc[indice_max_profit]
print("El máximo de ganancias es", fila_max_profit)

indice_min_profit = datos['Profit'].idxmin()
fila_min_profit = datos.loc[indice_min_profit]
print("El minimo de ganacias es", fila_min_profit)

#Se observa que la base de datos cuenta con 9994 registros y 22 variables. 
#La mayoría de estas son cualitativas, no hay datos vacios.
#Existen registros desde 2014, hasta 2018. 
#La media de las ventas es 229,85 teniendo un máximo en ventas de 22638,48.
#La cantidad maxima de un producto ha sido 14, y en promedio se piden 3,7 en cantidad.
#El máximo descuento que se ha dado es de 80%, y en promedio se da 0,15% de descuento. 
#Las ganancias en promedio son de 28,65, teniendo como mínimo -6599, 97 que se toman como perdidas
#y su máximo de 8399,97, se observa que el promedio se desvia por las perdidas. 

#Analizando los máximos de ventas, se observa que se trta de la categoría tecnología, maquinas,
#donde se pidieron 6, maquinas de videoconferencia, donde se obtuvo un descuento del 50%, sin embargo, 
#se obtuvo una perdda de 1811,07. Este pedido fue para la region sur. 

#El máximo en cantidad que tiene un pedido es de 14, la cual tuvo un descuento de 0,2. Enviado a la región Este
#El pedido fue de clips, en donde se obtuvo una ganancia de 14,5.

#El máximo de descuento que se ha tenido es del 80%, se realizó en la región central, del producto de filtros
#y se realizó un pedido de 5, la venta fue de 68,81 pero se obtuvo una perdida de -123.858, teniendo un pedido ya completado. 

#Se evidencia que aunque el pedido se encuentre en estado completado, hay pérdidas. Se debe analizar porque ocurren estos descuentos ya que
#al hacerlos significan una perdida. 

#La máxima ganancia es 8399.976, de fotocopiadoras donde se pidieron 5, este pedido se realizó en la región central. 
#El mínimo de ganancias, o la máxima perdida es de 6599.978, donde se obtiene una venta de 4499.985, se obtiene un descuento del 70%, se realiza un pedido 
#de 5 impresoras, se debe realizar un análisis para los descuentos ya que se ha evidenciado que por estos descuentos se obtienen mayores perdidas. 

resumen_segmento = datos.groupby('Segment').agg({
    'Sales': 'sum',
    'Discount': 'mean',
    'Discount': 'max',
    'Profit': 'mean'
})
print(resumen_segmento)

resumen_subcategoria = datos.groupby('Sub-Category').agg({
    'Sales': 'sum',
    'Discount': 'mean',
    'Discount': 'max',
    'Profit': 'mean'
})
print(resumen_subcategoria)

resumen_categoria = datos.groupby('Category').agg({
    'Sales': 'sum',
    'Discount': 'mean',
    'Discount': 'max',
    'Profit': 'mean'
})
print(resumen_categoria)

#Se puede observar que la sub-categoria de maquinas tiene en promedio un descuento del 30%. 
#Y que el máximo de descuento en categorías es para los office supplies. 

#La máxima ganancia se da en la sub-categoría de copiers, y donde se tienen más perdidas es en mesas. 
#Por consiguiente, la categoría de tecnología tiene mayores ganancias. 

##Gráficos

sns.boxplot(y="Profit",data=datos)
plt.show()

#Se puede observar que las ganancías tienen demasiada desviación. 
sns.boxplot(datos, y="Status", x="Profit").set(title="Dependiendo del status")
plt.show()
#Se observa que hay más variación en pendientes, y menor en completados, de acuerdo a sus ganancias. 
sns.boxplot(datos, y="Status", x="Sales").set(title="Dependiendo del status")
plt.show()

#La mayor cantidad de ventas está en estado abierto.

sns.barplot(data=datos, x='Discount', y= 'Profit')
plt.show()

#La mayoría de descuentos son del 0.2
#Como se puede observar desde el descuento del 30%, se dan perdidas, se puede observar como un descuento del 70% significó la mayor cantidad de perdida en términos de dinero. 

sns.scatterplot(data=datos, x='Discount', y= 'Profit')
plt.show()

sns.scatterplot(data=datos, x="Sales",y="Profit")
plt.show()

#Se observa la mayoría de ventas son menores a 5000, y hay una ligera tendencia. 


variables_cuantitativas = datos.select_dtypes(include=['number'])

# Ajusta el tamaño de la figura
plt.figure(figsize=(10, 8))

# Crea el heatmap utilizando las variables cuantitativas
sns.heatmap(data=variables_cuantitativas.corr(), annot=True, cmap='coolwarm', fmt='.2f')  # fmt='.2f' para mostrar 2 decimales



# Muestra el heatmap
plt.show()

#Hay una correlación entre la perdida, con el discount, y la variable creada de días demora no tiene correlación con ninguna variable. 
#Y hay una correlación inversa entre descuento y ganancia, es decir si el descuento aumenta, disminuye la ganancia. 
#Hay una correlación entre perdida y discount, entre más descuento hay, más perdida se evidencia. 
#La pérdida es que el margen de contribución para la venta es negativa.

plt.figure(figsize=(10, 6))  # Ajusta el tamaño de la figura (opcional)

# Utiliza sns.barplot() para crear el gráfico de barras
sns.barplot(x="Sales", y="Category", data=datos)

# Agrega etiquetas de los ejes y un título
plt.xlabel("Ventas")
plt.ylabel("Categoría")
plt.title("Gráfico de Barras de Ventas por Categoría")

# Muestra el gráfico de barras
plt.show()

#Se observa como la categoría tecnología tiene la mayor cantidad de ventas, así mismo de ganancias. 

sns.barplot(x="Profit", y="Category", data=datos)
# Agrega etiquetas de los ejes y un título
plt.xlabel("Profit")
plt.ylabel("Categoría")
plt.title("Gráfico de Barras de Ganancias por Categoría")

# Muestra el gráfico de barras
plt.show()

sns.countplot(datos, x="perdida ").set(title="Cantidad de ganancías y pérdidas")
plt.show()

#Se observa que hay una mayor cantidad de ganancias que de perdidas, sin embargo la cantidad de perdidas es bastante alta para el negocio.


correlation, p_value = pearsonr(datos['perdida '], datos['Discount'])

print(f"Correlación de Pearson: {correlation}")
print(f"Valor p: {p_value}")

if p_value < 0.05:
    print("La correlación es significativa.")
else:
    print("La correlación no es significativa.")

# Calcula el valor máximo de 'dias_demora' para cada región y selecciona las 5 regiones con los valores máximos más altos
top5_maximos = datos.groupby('City')['dias_demora'].mean()

# Crea el gráfico de barras
plt.figure(figsize=(7, 4))
top5_maximos.plot(kind='bar', color='skyblue')
plt.title('Top 5 Regiones con los Valores Máximos Más Altos de Dias de Demora')
plt.xlabel('Región')
plt.ylabel('Valor Máximo de Dias de Demora')
plt.xticks(rotation=45)

# Muestra el gráfico
plt.show()

plt.figure(figsize=(10, 6))  # Ajusta el tamaño de la figura (opcional)
sns.scatterplot(x="dias_demora", y="Sales", hue="Region", data=datos)

# Agrega etiquetas de los ejes y un título
plt.xlabel("Días de Demora")
plt.ylabel("Ventas")
plt.title("Scatter Plot de Días de Demora vs. Ventas")

# Muestra la leyenda
plt.legend(title="Región")

# Muestra el scatter plot
plt.show()

##ultimas graficas
#Se puede observar que los días de demora no son significantes, y no tienen correlación con las regiones.



#Se observa que la menor cantidad de ventas son de la region central 

plt.figure(figsize=(10, 6))  # Ajusta el tamaño de la figura (opcional)
sns.barplot(x="Region", y="Profit", data=datos, ci=None, palette="muted")

# Agrega etiquetas de los ejes y un título
plt.xlabel("Región")
plt.ylabel("Ganancias")
plt.title("Gráfico de Barras de Ganancias por Región")

# Muestra el gráfico de barras
plt.xticks(rotation=45)  # Rota las etiquetas del eje x para una mejor legibilidad
plt.tight_layout()  # Ajusta el diseño para evitar recortes

plt.show()

#La mayor cantidad de ganancias se da en la región west y la menor en la región central 


# Agrupa los datos por región y calcula la suma de ventas
ventas_por_region = datos.groupby('Region')['Sales'].sum()

# Crea el gráfico de anillo
plt.figure(figsize=(6, 6))  # Ajusta el tamaño de la figura (opcional)

# Dibuja un círculo blanco en el centro para crear el efecto de un gráfico de anillo
circle = plt.Circle((0, 0), 0.7, color='white')
plt.gca().add_artist(circle)

# Dibuja el gráfico de pastel exterior
plt.pie(ventas_por_region, labels=ventas_por_region.index, autopct='%1.1f%%', startangle=90)

# Título
plt.title('Gráfico de Anillo de Ventas por Región')

# Muestra el gráfico de anillo
plt.axis('equal')  # Asegura que el gráfico sea un círculo perfecto
plt.show()

#Se muestra que la región de west es la que más tiene ventas

datos['Order Date'] = pd.to_datetime(datos['Order Date'])

# Agrupa los datos por mes y calcula la suma de ventas por mes
ventas_por_mes = datos.groupby(datos['Order Date'].dt.to_period('M'))['Sales'].sum()

# Convierte los índices de tiempo a fechas
fechas = ventas_por_mes.index.to_timestamp()

# Crea el gráfico de series temporales de ventas por mes
plt.figure(figsize=(12, 6))  # Ajusta el tamaño de la figura (opcional)
plt.plot(fechas, ventas_por_mes, marker='o', linestyle='-')

# Agrega etiquetas de los ejes y un título
plt.xlabel("Fecha de Pedido (Mes)")
plt.ylabel("Ventas")
plt.title("Serie de Tiempo de Ventas por Mes")

# Formato de fecha en el eje x
plt.gca().xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter("%Y-%m"))
plt.gca().xaxis.set_major_locator(plt.matplotlib.dates.MonthLocator())

# Muestra el gráfico de series temporales
plt.grid(True)  # Agrega una cuadrícula (opcional)
plt.xticks(rotation=45)  # Rota las etiquetas del eje x para una mejor legibilidad
plt.tight_layout()  # Ajusta el diseño para evitar recortes
plt.show()


import matplotlib.pyplot as plt
import pandas as pd

# Supongamos que tienes un DataFrame "datos" con las columnas "Order Date" y "Sales"

# Asegúrate de que la columna 'Order Date' sea de tipo DateTime
datos['Order Date'] = pd.to_datetime(datos['Order Date'])

# Agrupa los datos por año y calcula la suma de ventas por año
ventas_por_anio = datos.groupby(datos['Order Date'].dt.year)['Sales'].sum()

# Crea el gráfico de series temporales de ventas por año
plt.figure(figsize=(12, 6))  # Ajusta el tamaño de la figura (opcional)
plt.plot(ventas_por_anio.index, ventas_por_anio, marker='o', linestyle='-')

# Agrega etiquetas de los ejes y un título
plt.xlabel("Año")
plt.ylabel("Ventas")
plt.title("Serie de Tiempo de Ventas por Año")

# Muestra el gráfico de series temporales
plt.grid(True)  # Agrega una cuadrícula (opcional)
plt.xticks(rotation=45)  # Rota las etiquetas del eje x para una mejor legibilidad
plt.tight_layout()  # Ajusta el diseño para evitar recortes
plt.show()



#Se puede observar que en la serie de tiempo por mes, es ciclica ya que tiene subidas y bajadas, 
#con una bajada siempre en diciembre y enero y una subiuda en septiembre. 
#Tambien se ve una subida desde el año 2015

plt.figure(figsize=(10, 6))  # Ajusta el tamaño de la figura (opcional)
sns.barplot(x="Status", y="Sales", data=datos)

# Agrega etiquetas de los ejes y un título
plt.xlabel("Estado")
plt.ylabel("Ventas")
plt.title("Ventas por Estado")

# Muestra el gráfico de barras
plt.xticks(rotation=45)  # Rota las etiquetas del eje x para una mejor legibilidad
plt.tight_layout()  # Ajusta el diseño para evitar recortes
plt.show()

#La mayor cantidad de ventas está en estado open


import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import pearsonr
from PIL import Image
import os

pd.set_option('display.max_columns', None)

archivo_origen = "g1caso2\dta_flimpiadav2.csv"
# Leer los datos desde el archivo CSV y especificar que la primera fila es el encabezado
datos = pd.read_csv(archivo_origen)

# ... (El resto del código sigue igual)

# Gráfico de Caja (Box Plot) de Ganancias
sns.boxplot(y="Profit", data=datos)
plt.savefig("BoxPlot_Ganancias.png")  # Guarda el gráfico como PNG
plt.show()

# Gráfico de Caja (Box Plot) de Ganancias Dependiendo del Estado
sns.boxplot(datos, y="Status", x="Profit").set(title="Dependiendo del status")
plt.savefig("BoxPlot_Ganancias_Estado.png")  # Guarda el gráfico como PNG
plt.show()

# Gráfico de Caja (Box Plot) de Ventas Dependiendo del Estado
sns.boxplot(datos, y="Status", x="Sales").set(title="Dependiendo del status")
plt.savefig("BoxPlot_Ventas_Estado.png")  # Guarda el gráfico como PNG
plt.show()

# Gráfico de Barras de Descuentos vs Ganancias
sns.barplot(data=datos, x='Discount', y='Profit')
plt.savefig("BarPlot_Descuentos_Ganancias.png")  # Guarda el gráfico como PNG
plt.show()

# Gráfico de Dispersión (Scatter Plot) de Descuentos vs Ganancias
sns.scatterplot(data=datos, x='Discount', y='Profit')
plt.savefig("ScatterPlot_Descuentos_Ganancias.png")  # Guarda el gráfico como PNG
plt.show()

# Gráfico de Dispersión (Scatter Plot) de Ventas vs Ganancias
sns.scatterplot(data=datos, x="Sales", y="Profit")
plt.savefig("ScatterPlot_Ventas_Ganancias.png")  # Guarda el gráfico como PNG
plt.show()

# Heatmap de Correlación entre Variables Cuantitativas
plt.figure(figsize=(10, 8))  # Ajusta el tamaño de la figura (opcional)
sns.heatmap(data=variables_cuantitativas.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.savefig("Heatmap_Correlacion_Variables_Cuantitativas.png")  # Guarda el gráfico como PNG
plt.show()

# Gráfico de Barras de Ventas por Categoría
sns.barplot(x="Sales", y="Category", data=datos)
plt.xlabel("Ventas")
plt.ylabel("Categoría")
plt.title("Gráfico de Barras de Ventas por Categoría")
plt.savefig("BarPlot_Ventas_Categoria.png")  # Guarda el gráfico como PNG
plt.show()

# Gráfico de Barras de Ganancias por Categoría
sns.barplot(x="Profit", y="Category", data=datos)
plt.xlabel("Profit")
plt.ylabel("Categoría")
plt.title("Gráfico de Barras de Ganancias por Categoría")
plt.savefig("BarPlot_Ganancias_Categoria.png")  # Guarda el gráfico como PNG
plt.show()

# Gráfico de Barras de Cantidad de Ganancias y Pérdidas
sns.countplot(datos, x="perdida ").set(title="Cantidad de ganancias y pérdidas")
plt.savefig("CountPlot_Ganancias_Perdidas.png")  # Guarda el gráfico como PNG
plt.show()

# Calcula el valor máximo de 'dias_demora' para cada región y selecciona las 5 regiones con los valores máximos más altos
top5_maximos = datos.groupby('City')['dias_demora'].mean()

# Gráfico de Barras de Top 5 Regiones con los Valores Máximos Más Altos de Días de Demora
plt.figure(figsize=(7, 4))
top5_maximos.plot(kind='bar', color='skyblue')
plt.title('Top 5 Regiones con los Valores Máximos Más Altos de Días de Demora')
plt.xlabel('Región')
plt.ylabel('Valor Máximo de Días de Demora')
plt.xticks(rotation=45)
plt.savefig("BarPlot_Top5_Regiones_Dias_Demora.png")  # Guarda el gráfico como PNG
plt.show()


# Gráfico de Barras de Ganancias por Región
plt.figure(figsize=(10, 6))  
sns.barplot(x="Region", y="Profit", data=datos, ci=None, palette="muted")
plt.xlabel("Región")
plt.ylabel("Ganancias")
plt.title("Gráfico de Barras de Ganancias por Región")
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig("BarPlot_Ganancias_Por_Region.png")  # Guarda el gráfico como PNG
plt.show()

# Gráfico de Anillo de Ventas por Región
ventas_por_region = datos.groupby('Region')['Sales'].sum()
plt.figure(figsize=(6, 6))  
circle = plt.Circle((0, 0), 0.7, color='white')
plt.gca().add_artist(circle)
plt.pie(ventas_por_region, labels=ventas_por_region.index, autopct='%1.1f%%', startangle=90)
plt.title('Gráfico de Anillo de Ventas por Región')
plt.axis('equal')
plt.savefig("PieChart_Ventas_Por_Region.png")  # Guarda el gráfico como PNG
plt.show()

# Serie de Tiempo de Ventas por Mes
datos['Order Date'] = pd.to_datetime(datos['Order Date'])
ventas_por_mes = datos.groupby(datos['Order Date'].dt.to_period('M'))['Sales'].sum()
fechas = ventas_por_mes.index.to_timestamp()
plt.figure(figsize=(12, 6))
plt.plot(fechas, ventas_por_mes, marker='o', linestyle='-')
plt.xlabel("Fecha de Pedido (Mes)")
plt.ylabel("Ventas")
plt.title("Serie de Tiempo de Ventas por Mes")
plt.gca().xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter("%Y-%m"))
plt.gca().xaxis.set_major_locator(plt.matplotlib.dates.MonthLocator())
plt.grid(True)
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig("TimeSeries_Ventas_Por_Mes.png")  # Guarda el gráfico como PNG
plt.show()

# Serie de Tiempo de Ventas por Año
plt.figure(figsize=(12, 6))
ventas_por_anio = datos.groupby(datos['Order Date'].dt.year)['Sales'].sum()
plt.plot(ventas_por_anio.index, ventas_por_anio, marker='o', linestyle='-')
plt.xlabel("Año")
plt.ylabel("Ventas")
plt.title("Serie de Tiempo de Ventas por Año")
plt.grid(True)
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig("TimeSeries_Ventas_Por_Año.png")  # Guarda el gráfico como PNG
plt.show()

# Gráfico de Barras de Ventas por Estado
plt.figure(figsize=(10, 6))
sns.barplot(x="Status", y="Sales", data=datos)
plt.xlabel("Estado")
plt.ylabel("Ventas")
plt.title("Ventas por Estado")
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig("BarPlot_Ventas_Por_Estado.png")  # Guarda el gráfico como PNG
plt.show()